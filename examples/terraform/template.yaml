# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: terraform-template
  title: Example Terraform Template for Platform Teams
  description: An example template for the scaffolder that creates infrastructure with Terraform
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
        - description
        - organization
        - project
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Description
          type: string
          description: A description for the component
        organization:
          title: Organization
          type: string
          description: The name of an existing Terraform organization
        project:
          title: Project
          type: string
          description: The name of a new Terraform project you want to create
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            requestUserCredentials:
              secretsKey: USER_OAUTH_TOKEN
            allowedHosts:
              - github.com
    - title: Define Terraform Cloud secrets engine for Vault
      properties:
        vaultMount:
          title: Vault Mount
          type: string
          description: A mount for the Terraform Cloud secrets engine in Vault
          default: terraform
        vaultRole:
          title: Vault Role
          type: string
          description: A role to use for accessing the Terraform Cloud token in Vault
          default: backstage
    - title: Define variables for Terraform module
      properties:
        secondHello:
          title: Second Hello
          type: string
          description: A variable to pass to the Terraform module, specifically a second greeting
          default: Backstage

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          organization: ${{ parameters.organization }}
          project: ${{ parameters.project }}
          secondHello: ${{ parameters.secondHello }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        token: '${{ secrets.USER_OAUTH_TOKEN }}'
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: vault-auth
      name: Authenticate to Vault using GitHub Auth Method
      action: vault:authenticate:github
      input:
        token: '${{ secrets.USER_OAUTH_TOKEN }}'
        path: 'github'

    - id: vault-tfc-token
      name: Get Terraform token from Vault
      action: vault:secrets:terraform
      input:
        token: '${{ secrets.VAULT_TOKEN }}'
        mount: ${{ parameters.vaultMount }}
        role: ${{ parameters.vaultRole }}

    # - id: terraform-project
    #   name: Create Terraform Project
    #   action: terraform:project:create
    #   input:
    #     token: '${{ secrets.TERRAFORM_CLOUD_TOKEN }}'
    #     organization: ${{ parameters.organization }}
    #     name: ${{ parameters.project }}

    - id: terraform-workspace
      name: Create Terraform Workspace
      action: terraform:workspace:create
      input:
        token: '${{ secrets.TERRAFORM_CLOUD_TOKEN }}'
        organization: ${{ parameters.organization }}
        project: ${{ parameters.project }}
        name: ${{ parameters.name }}
        vcsSourceProvider: 'github'
        vcsOwner: ${{ (parameters.repoUrl | parseRepoUrl).owner }}
        vcsRepo: ${{ (parameters.repoUrl | parseRepoUrl).repo }}

    - id: terraform-variables
      name: Create Terraform Variables
      action: terraform:variables:create
      input:
        token: '${{ secrets.TERRAFORM_CLOUD_TOKEN }}'
        workspaceID: ${{ steps['terraform-workspace'].output.id }}
        variables:
          - key: second_hello
            value: ${{ parameters.secondHello }}
            description: 'A second hello to add as a greeting'
            category: terraform
          - key: secret_key
            value: 'some-secret-key-from-output-on-another-step'
            description: 'An example of a sensitive variable passed to Terraform'
            category: terraform
            sensitive: true

    - id: terraform-run
      name: Create Terraform Run
      action: terraform:run:create
      input:
        token: '${{ secrets.TERRAFORM_CLOUD_TOKEN }}'
        workspaceID: ${{ steps['terraform-workspace'].output.id }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Terraform Workspace
        url: ${{ steps['terraform-workspace'].output.url }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
